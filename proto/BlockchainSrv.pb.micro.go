// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/BlockchainSrv.proto

package BlockchainSrv

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BlockchainSrv service

func NewBlockchainSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BlockchainSrv service

type BlockchainSrvService interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...client.CallOption) (*ProposeResponse, error)
	Proofs(ctx context.Context, in *ProofsRequest, opts ...client.CallOption) (*ProofsResponse, error)
}

type blockchainSrvService struct {
	c    client.Client
	name string
}

func NewBlockchainSrvService(name string, c client.Client) BlockchainSrvService {
	return &blockchainSrvService{
		c:    c,
		name: name,
	}
}

func (c *blockchainSrvService) Propose(ctx context.Context, in *ProposeRequest, opts ...client.CallOption) (*ProposeResponse, error) {
	req := c.c.NewRequest(c.name, "BlockchainSrv.Propose", in)
	out := new(ProposeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainSrvService) Proofs(ctx context.Context, in *ProofsRequest, opts ...client.CallOption) (*ProofsResponse, error) {
	req := c.c.NewRequest(c.name, "BlockchainSrv.Proofs", in)
	out := new(ProofsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockchainSrv service

type BlockchainSrvHandler interface {
	Propose(context.Context, *ProposeRequest, *ProposeResponse) error
	Proofs(context.Context, *ProofsRequest, *ProofsResponse) error
}

func RegisterBlockchainSrvHandler(s server.Server, hdlr BlockchainSrvHandler, opts ...server.HandlerOption) error {
	type blockchainSrv interface {
		Propose(ctx context.Context, in *ProposeRequest, out *ProposeResponse) error
		Proofs(ctx context.Context, in *ProofsRequest, out *ProofsResponse) error
	}
	type BlockchainSrv struct {
		blockchainSrv
	}
	h := &blockchainSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&BlockchainSrv{h}, opts...))
}

type blockchainSrvHandler struct {
	BlockchainSrvHandler
}

func (h *blockchainSrvHandler) Propose(ctx context.Context, in *ProposeRequest, out *ProposeResponse) error {
	return h.BlockchainSrvHandler.Propose(ctx, in, out)
}

func (h *blockchainSrvHandler) Proofs(ctx context.Context, in *ProofsRequest, out *ProofsResponse) error {
	return h.BlockchainSrvHandler.Proofs(ctx, in, out)
}
