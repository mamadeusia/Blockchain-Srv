// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package postgres

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ProposalStatus string

const (
	ProposalStatusFailed  ProposalStatus = "failed"
	ProposalStatusSuccess ProposalStatus = "success"
)

func (e *ProposalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProposalStatus(s)
	case string:
		*e = ProposalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProposalStatus: %T", src)
	}
	return nil
}

type NullProposalStatus struct {
	ProposalStatus ProposalStatus
	Valid          bool // Valid is true if ProposalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProposalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProposalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProposalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProposalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ProposalStatus, nil
}

type ProposalType string

const (
	ProposalTypeWithdrawal ProposalType = "withdrawal"
	ProposalTypeDonation   ProposalType = "donation"
)

func (e *ProposalType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProposalType(s)
	case string:
		*e = ProposalType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProposalType: %T", src)
	}
	return nil
}

type NullProposalType struct {
	ProposalType ProposalType
	Valid        bool // Valid is true if ProposalType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProposalType) Scan(value interface{}) error {
	if value == nil {
		ns.ProposalType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProposalType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProposalType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ProposalType, nil
}

type ProposalValidators struct {
	ProposeID        []byte `db:"propose_id" json:"propose_id"`
	ValidatorAddress string `db:"validator_address" json:"validator_address"`
}

type Proposals struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	ProposeID        []byte             `db:"propose_id" json:"propose_id"`
	Description      string             `db:"description" json:"description"`
	CandidateID      string             `db:"candidate_id" json:"candidate_id"`
	CandidateAddress []byte             `db:"candidate_address" json:"candidate_address"`
	TokenOffer       int64              `db:"token_offer" json:"token_offer"`
	MerkleRoot       []byte             `db:"merkle_root" json:"merkle_root"`
	TxHash           []byte             `db:"tx_hash" json:"tx_hash"`
	ValidatorCount   int64              `db:"validator_count" json:"validator_count"`
	ProposalType     ProposalType       `db:"proposal_type" json:"proposal_type"`
	ProposalStatus   NullProposalStatus `db:"proposal_status" json:"proposal_status"`
	CreatedAt        time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt        time.Time          `db:"updated_at" json:"updated_at"`
}
