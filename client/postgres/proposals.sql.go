// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: proposals.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createProposal = `-- name: CreateProposal :exec
INSERT INTO proposals (
        "id",
        "propose_id",
        "description",
        "candidate_id",
        "candidate_address",
        "token_offer",
        "merkle_root",
        "tx_hash",
        "validator_count",
        "proposal_type",
        "proposal_status"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateProposalParams struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	ProposeID        []byte             `db:"propose_id" json:"propose_id"`
	Description      string             `db:"description" json:"description"`
	CandidateID      string             `db:"candidate_id" json:"candidate_id"`
	CandidateAddress []byte             `db:"candidate_address" json:"candidate_address"`
	TokenOffer       int64              `db:"token_offer" json:"token_offer"`
	MerkleRoot       []byte             `db:"merkle_root" json:"merkle_root"`
	TxHash           []byte             `db:"tx_hash" json:"tx_hash"`
	ValidatorCount   int64              `db:"validator_count" json:"validator_count"`
	ProposalType     ProposalType       `db:"proposal_type" json:"proposal_type"`
	ProposalStatus   NullProposalStatus `db:"proposal_status" json:"proposal_status"`
}

func (q *Queries) CreateProposal(ctx context.Context, arg CreateProposalParams) error {
	_, err := q.db.Exec(ctx, createProposal,
		arg.ID,
		arg.ProposeID,
		arg.Description,
		arg.CandidateID,
		arg.CandidateAddress,
		arg.TokenOffer,
		arg.MerkleRoot,
		arg.TxHash,
		arg.ValidatorCount,
		arg.ProposalType,
		arg.ProposalStatus,
	)
	return err
}
